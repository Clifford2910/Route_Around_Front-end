{"ast":null,"code":"var _jsxFileName = \"/Users/student/Projects/google-react-test/src/App.js\";\n\n/*global google*/\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport CurrentLocation from './CurrentLocation';\nexport class MapContainer extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.displayMarkers = () => {\n      return this.state.stores.map((store, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: store.lat,\n            lng: store.lng\n          },\n          onClick: () => console.log(\"You clicked me!\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.getCoordinates = async postcode => {\n      const locator = new google.maps.Geocoder();\n      const coords = await new Promise(function (resolve, reject) {\n        locator.geocode({\n          'address': postcode\n        }, function (results, status) {\n          resolve(results);\n        });\n      });\n      return {\n        lat: coords[0].geometry.location.lat(),\n        lng: coords[0].geometry.location.lng()\n      };\n    };\n\n    this.setCurrentLocation = async () => {\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(pos => {\n            const coords = pos.coords;\n            this.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            });\n          });\n        }\n      }\n    };\n\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      darkMode: false,\n      stores: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      postCode: '',\n      distance: 0,\n      geocoder: {},\n      postCodeCoords: {},\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n    this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleToggleDarkMode = this.handleToggleDarkMode.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handlePostcodeChange(event) {\n    this.setState({\n      postCode: event.target.value\n    });\n  }\n\n  handleDistanceChange(event) {\n    this.setState({\n      distance: event.target.value\n    });\n  }\n\n  handleToggleDarkMode(event) {\n    let darkMode = this.state.darkMode;\n    this.setState({\n      darkMode: !darkMode\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.getCoordinates(this.state.postCode).then(result => {\n      alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n      this.setState({\n        postCodeCoords: result\n      });\n      var data = {\n        'coordinates': this.state.postCodeCoords,\n        'distance': this.state.distance\n      };\n      fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        return response.json();\n      }).then(myJson => {\n        this.setState({\n          stores: myJson\n        });\n      });\n    }).catch(error => {\n      alert(error);\n    });\n  }\n\n  componentDidMount() {\n    this.setCurrentLocation();\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer();\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng);\n    var mapOptions = {\n      center: center,\n      zoom: 16\n    };\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n  }\n\n  componentDidUpdate() {\n    this.setCurrentLocation();\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer({\n      suppressMarkers: true\n    });\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng);\n    var mapOptions1 = {\n      center: center,\n      zoom: 16\n    };\n    var mapOptions2 = {\n      center: center,\n      zoom: 16,\n      styles: [{\n        elementType: 'geometry',\n        stylers: [{\n          color: '#242f3e'\n        }]\n      }, {\n        elementType: 'labels.text.stroke',\n        stylers: [{\n          color: '#242f3e'\n        }]\n      }, {\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#746855'\n        }]\n      }, {\n        featureType: 'administrative.locality',\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#d59563'\n        }]\n      }, {\n        featureType: 'poi',\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#d59563'\n        }]\n      }, {\n        featureType: 'poi.park',\n        elementType: 'geometry',\n        stylers: [{\n          color: '#263c3f'\n        }]\n      }, {\n        featureType: 'poi.park',\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#6b9a76'\n        }]\n      }, {\n        featureType: 'road',\n        elementType: 'geometry',\n        stylers: [{\n          color: '#38414e'\n        }]\n      }, {\n        featureType: 'road',\n        elementType: 'geometry.stroke',\n        stylers: [{\n          color: '#212a37'\n        }]\n      }, {\n        featureType: 'road',\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#9ca5b3'\n        }]\n      }, {\n        featureType: 'road.highway',\n        elementType: 'geometry',\n        stylers: [{\n          color: '#746855'\n        }]\n      }, {\n        featureType: 'road.highway',\n        elementType: 'geometry.stroke',\n        stylers: [{\n          color: '#1f2835'\n        }]\n      }, {\n        featureType: 'road.highway',\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#f3d19c'\n        }]\n      }, {\n        featureType: 'transit',\n        elementType: 'geometry',\n        stylers: [{\n          color: '#2f3948'\n        }]\n      }, {\n        featureType: 'transit.station',\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#d59563'\n        }]\n      }, {\n        featureType: 'water',\n        elementType: 'geometry',\n        stylers: [{\n          color: '#17263c'\n        }]\n      }, {\n        featureType: 'water',\n        elementType: 'labels.text.fill',\n        stylers: [{\n          color: '#515c6d'\n        }]\n      }, {\n        featureType: 'water',\n        elementType: 'labels.text.stroke',\n        stylers: [{\n          color: '#17263c'\n        }]\n      }]\n    };\n\n    if (this.state.darkMode) {\n      document.body.classList.add('dark-mode');\n      var map = new google.maps.Map(document.getElementById('map'), mapOptions2);\n    } else {\n      document.body.classList.remove('dark-mode');\n      var map = new google.maps.Map(document.getElementById('map'), mapOptions1);\n    }\n\n    var image1 = 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png';\n    var markerStart = new google.maps.Marker({\n      position: this.state.stores[0],\n      icon: image1,\n      scale: 5\n    });\n    var image2 = 'http://maps.google.com/mapfiles/ms/icons/green-dot.png';\n    var markerCurrent = new google.maps.Marker({\n      position: this.state.currentLocation,\n      icon: image2,\n      scale: 5\n    });\n    markerStart.setMap(map);\n    markerCurrent.setMap(map);\n    directionsRenderer.setMap(map);\n    directionsService.route({\n      origin: new google.maps.LatLng(this.state.stores[0]),\n      destination: new google.maps.LatLng(this.state.stores[0]),\n      waypoints: [{\n        location: new google.maps.LatLng(this.state.stores[1])\n      }, {\n        location: new google.maps.LatLng(this.state.stores[2])\n      }, {\n        location: new google.maps.LatLng(this.state.stores[3])\n      }],\n      avoidHighways: true,\n      travelMode: 'WALKING',\n      region: 'gb'\n    }, function (result, status) {\n      directionsRenderer.setDirections(result);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Route Around\"), React.createElement(\"div\", {\n      className: \"dark-mode-toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleToggleDarkMode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Toggle Dark Mode\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(CopyToClipboard, {\n      text: window.location.href,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Share Route! (atm copy url)\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"App\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Start Location:\", React.createElement(\"input\", {\n      name: \"postCode\",\n      type: \"text\",\n      value: this.state.postCode,\n      onChange: this.handlePostcodeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), \"(PostCode)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Distance:\", React.createElement(\"input\", {\n      name: \"distance\",\n      type: \"number\",\n      value: this.state.distance,\n      onChange: this.handleDistanceChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), \"Kilometres\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Generate Route!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(Map, {\n      yesIWantToUseGoogleMapApiInternals: true,\n      centerAroundCurrentLocation: true,\n      google: this.props.google,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'current location',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, this.state.selectedPlace.name))), React.createElement(Marker, {\n      icon: \"https://www.robotwoods.com/dev/misc/bluecircle.png\",\n      position: this.state.currentLocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), this.displayMarkers())))));\n  }\n\n} // export default App;\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n})(MapContainer);\nMapContainer.defaultProps = {\n  zoom: 17,\n  initialCenter: {\n    lat: 51.4934,\n    lng: 0.0098\n  },\n  centerAroundCurrentLocation: true,\n  visible: true\n};","map":{"version":3,"sources":["/Users/student/Projects/google-react-test/src/App.js"],"names":["React","Map","GoogleApiWrapper","Marker","InfoWindow","Polyline","DirectionsRenderer","GoogleMapReact","CopyToClipboard","CurrentLocation","MapContainer","Component","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","displayMarkers","stores","map","store","index","lat","lng","console","log","getCoordinates","postcode","locator","google","maps","Geocoder","coords","Promise","resolve","reject","geocode","results","status","geometry","location","setCurrentLocation","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","currentLocation","latitude","longitude","initialCenter","darkMode","postCode","distance","geocoder","postCodeCoords","handlePostcodeChange","bind","handleDistanceChange","handleToggleDarkMode","handleSubmit","event","target","value","preventDefault","then","result","alert","data","fetch","method","headers","body","JSON","stringify","response","json","myJson","catch","error","componentDidMount","directionsService","DirectionsService","directionsRenderer","center","LatLng","mapOptions","zoom","document","getElementById","setMap","componentDidUpdate","suppressMarkers","mapOptions1","mapOptions2","styles","elementType","stylers","color","featureType","classList","add","remove","image1","markerStart","position","icon","scale","image2","markerCurrent","route","origin","destination","waypoints","avoidHighways","travelMode","region","setDirections","render","window","href","name","apiKey","defaultProps","visible"],"mappings":"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","sourcesContent":["/*global google*/\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport CurrentLocation from './CurrentLocation';\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    const { lat, lng } = this.props.initialCenter\n    this.state = {\n      darkMode: false,\n      stores: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      postCode: '',\n      distance: 0,\n      geocoder: {},\n      postCodeCoords: {},\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    }\n    this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleToggleDarkMode = this.handleToggleDarkMode.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  displayMarkers = () => {\n    return this.state.stores.map((store, index) => {\n      return <Marker key={index} id={index} position={{\n       lat: store.lat,\n       lng: store.lng\n     }}\n     onClick={() => console.log(\"You clicked me!\")} />\n    })\n  }\n\n  getCoordinates = async (postcode) => {\n    const locator = new google.maps.Geocoder();\n    const coords = await new Promise(function(resolve, reject) {\n      locator.geocode({ 'address': postcode }, function(results, status) {\n        resolve(results);\n      })\n    })\n    return { lat: coords[0].geometry.location.lat(), lng: coords[0].geometry.location.lng() }\n  }\n\n  setCurrentLocation = async () => {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n  }\n\n  handlePostcodeChange(event) {\n    this.setState({postCode: event.target.value});\n  }\n\n  handleDistanceChange(event) {\n    this.setState({distance: event.target.value});\n  }\n\n  handleToggleDarkMode(event) {\n    let darkMode = this.state.darkMode\n    this.setState({darkMode: !darkMode})\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    this.getCoordinates(this.state.postCode)\n    .then(result => {\n      alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n      this.setState({postCodeCoords: result});\n      var data = {\n        'coordinates': this.state.postCodeCoords,\n        'distance': this.state.distance\n      }\n      fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n      })\n      .then((response) => {\n        return response.json();\n      })\n      .then((myJson) => {\n        this.setState({stores: myJson})\n      });\n    })\n    .catch(error => {\n      alert(error)\n    })\n  };\n\n  componentDidMount() {\n    this.setCurrentLocation();\n\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer();\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n    var mapOptions = {\n      center: center,\n      zoom: 16\n    }\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n  }\n\n  componentDidUpdate() {\n    this.setCurrentLocation();\n\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer({suppressMarkers: true});\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n    var mapOptions1 = {\n      center: center,\n      zoom: 16\n    }\n    var mapOptions2 = {\n      center: center,\n      zoom: 16,\n      styles: [\n            {elementType: 'geometry', stylers: [{color: '#242f3e'}]},\n            {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},\n            {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},\n            {\n              featureType: 'administrative.locality',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#d59563'}]\n            },\n            {\n              featureType: 'poi',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#d59563'}]\n            },\n            {\n              featureType: 'poi.park',\n              elementType: 'geometry',\n              stylers: [{color: '#263c3f'}]\n            },\n            {\n              featureType: 'poi.park',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#6b9a76'}]\n            },\n            {\n              featureType: 'road',\n              elementType: 'geometry',\n              stylers: [{color: '#38414e'}]\n            },\n            {\n              featureType: 'road',\n              elementType: 'geometry.stroke',\n              stylers: [{color: '#212a37'}]\n            },\n            {\n              featureType: 'road',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#9ca5b3'}]\n            },\n            {\n              featureType: 'road.highway',\n              elementType: 'geometry',\n              stylers: [{color: '#746855'}]\n            },\n            {\n              featureType: 'road.highway',\n              elementType: 'geometry.stroke',\n              stylers: [{color: '#1f2835'}]\n            },\n            {\n              featureType: 'road.highway',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#f3d19c'}]\n            },\n            {\n              featureType: 'transit',\n              elementType: 'geometry',\n              stylers: [{color: '#2f3948'}]\n            },\n            {\n              featureType: 'transit.station',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#d59563'}]\n            },\n            {\n              featureType: 'water',\n              elementType: 'geometry',\n              stylers: [{color: '#17263c'}]\n            },\n            {\n              featureType: 'water',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#515c6d'}]\n            },\n            {\n              featureType: 'water',\n              elementType: 'labels.text.stroke',\n              stylers: [{color: '#17263c'}]\n            }\n          ]\n    }\n\n\n    if (this.state.darkMode) {\n        document.body.classList.add('dark-mode');\n        var map = new google.maps.Map(document.getElementById('map'), mapOptions2);\n    } else {\n        document.body.classList.remove('dark-mode');\n        var map = new google.maps.Map(document.getElementById('map'), mapOptions1);\n    }\n    var image1 = 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n    var markerStart = new google.maps.Marker({position: this.state.stores[0], icon: image1, scale: 5})\n    var image2 = 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n    var markerCurrent = new google.maps.Marker({position: this.state.currentLocation, icon: image2, scale: 5})\n    markerStart.setMap(map);\n    markerCurrent.setMap(map);\n    directionsRenderer.setMap(map);\n\n    directionsService.route({\n      origin: new google.maps.LatLng(this.state.stores[0]),\n      destination: new google.maps.LatLng(this.state.stores[0]),\n      waypoints: [\n          {location: new google.maps.LatLng(this.state.stores[1])},\n          {location: new google.maps.LatLng(this.state.stores[2])},\n          {location: new google.maps.LatLng(this.state.stores[3])}\n        ],\n      avoidHighways: true,\n      travelMode: 'WALKING',\n      region: 'gb'\n    }, function (result, status) {\n      directionsRenderer.setDirections(result);\n    })\n  }\n\n\n  render() {\n    return (\n      <div className='App'>\n      <div>\n        <h1>Route Around</h1>\n        <div className=\"dark-mode-toggle\">\n          <button type='button' onClick={this.handleToggleDarkMode}>Toggle Dark Mode</button>\n          <br />\n          <CopyToClipboard text={window.location.href}>\n            <button>Share Route! (atm copy url)</button>\n          </CopyToClipboard>\n        </div>\n        <br />\n      <div>\n      <form className='App' onSubmit={this.handleSubmit}>\n        <label>\n          Start Location:\n          <input\n            name=\"postCode\"\n            type=\"text\"\n            value={this.state.postCode}\n            onChange={this.handlePostcodeChange} />\n            (PostCode)\n        </label>\n        <br />\n        <br />\n        <label>\n          Distance:\n          <input\n            name=\"distance\"\n            type=\"number\"\n            value={this.state.distance}\n            onChange={this.handleDistanceChange} />\n            Kilometres\n        </label>\n        <br />\n        <br />\n        <input type=\"submit\" value=\"Generate Route!\" />\n        <br />\n        <br />\n      </form>\n      <div id='map'>\n        <Map yesIWantToUseGoogleMapApiInternals centerAroundCurrentLocation google={this.props.google}>\n          <Marker onClick={this.onMarkerClick} name={'current location'} />\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n          </InfoWindow>\n          <Marker\n                icon=\"https://www.robotwoods.com/dev/misc/bluecircle.png\"\n                position={this.state.currentLocation}\n            />\n          {this.displayMarkers()}\n        </Map>\n      </div>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n// export default App;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n})(MapContainer);\n\nMapContainer.defaultProps = {\n  zoom: 17,\n  initialCenter: {\n    lat: 51.4934,\n    lng: 0.0098\n  },\n  centerAroundCurrentLocation: true,\n  visible: true\n};\n"]},"metadata":{},"sourceType":"module"}