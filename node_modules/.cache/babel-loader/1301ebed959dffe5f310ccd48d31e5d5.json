{"ast":null,"code":"var _jsxFileName = \"/Users/student/Projects/google-react-test/src/App.js\";\n// /*global google*/\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\n// import CurrentLocation from './CurrentLocation';\n//\n// export class MapContainer extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     const { lat, lng } = this.props.initialCenter\n//     this.state = {\n//       stores: [],\n//       showingInfoWindow: false,\n//       activeMarker: {},\n//       selectedPlace: {},\n//       postCode: '',\n//       distance: 0,\n//       geocoder: {},\n//       postCodeCoords: {},\n//       currentLocation: {\n//         lat: lat,\n//         lng: lng\n//       }\n//     }\n//     this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n//     this.handleDistanceChange = this.handleDistanceChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//\n//   onMarkerClick = (props, marker, e) =>\n//     this.setState({\n//       selectedPlace: props,\n//       activeMarker: marker,\n//       showingInfoWindow: true\n//     });\n//\n//\n//   onClose = props => {\n//     if (this.state.showingInfoWindow) {\n//       this.setState({\n//         showingInfoWindow: false,\n//         activeMarker: null\n//       });\n//     }\n//   };\n//\n//   displayMarkers = () => {\n//     return this.state.stores.map((store, index) => {\n//       return <Marker key={index} id={index} position={{\n//        lat: store.lat,\n//        lng: store.lng\n//      }}\n//      onClick={() => console.log(\"You clicked me!\")} />\n//     })\n//   }\n//\n//   getCoordinates = async (postcode) => {\n//     const locator = new google.maps.Geocoder();\n//     const coords = await new Promise(function(resolve, reject) {\n//       locator.geocode({ 'address': postcode }, function(results, status) {\n//         resolve(results);\n//       })\n//     })\n//     return { lat: coords[0].geometry.location.lat(), lng: coords[0].geometry.location.lng() }\n//   }\n//\n//   setCurrentLocation = async () => {\n//     if (this.props.centerAroundCurrentLocation) {\n//       if (navigator && navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(pos => {\n//           const coords = pos.coords;\n//           this.setState({\n//             currentLocation: {\n//               lat: coords.latitude,\n//               lng: coords.longitude\n//             }\n//           });\n//         });\n//       }\n//     }\n//   }\n//\n//   handlePostcodeChange(event) {\n//     this.setState({postCode: event.target.value});\n//   }\n//\n//   handleDistanceChange(event) {\n//     this.setState({distance: event.target.value});\n//   }\n//\n//   handleSubmit(event) {\n//     event.preventDefault()\n//     this.getCoordinates(this.state.postCode)\n//     .then(result => {\n//       alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n//       this.setState({postCodeCoords: result});\n//       var data = {\n//         'coordinates': this.state.postCodeCoords,\n//         'distance': this.state.distance\n//       }\n//       fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(data)\n//       })\n//       .then((response) => {\n//         return response.json();\n//       })\n//       .then((myJson) => {\n//         this.setState({stores: myJson})\n//       });\n//     })\n//     .catch(error => {\n//       alert(error)\n//     })\n//   };\n//\n//   componentDidMount() {\n//     this.setCurrentLocation();\n//\n//     var directionsService = new google.maps.DirectionsService();\n//     var directionsRenderer = new google.maps.DirectionsRenderer();\n//     var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n//     var mapOptions = {\n//       center: center,\n//       zoom: 16\n//     }\n//     var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n//     directionsRenderer.setMap(map);\n//   }\n//\n//   componentDidUpdate() {\n//     this.setCurrentLocation();\n//\n//     var directionsService = new google.maps.DirectionsService();\n//     var directionsRenderer = new google.maps.DirectionsRenderer({suppressMarkers: true});\n//     var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n//     var mapOptions = {\n//       center: center,\n//       zoom: 16\n//     }\n//     var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n//     var markerStart = new google.maps.Marker({position: this.state.stores[0]})\n//     var markerCurrent = new google.maps.Marker({position: this.state.currentLocation})\n//     markerStart.setMap(map);\n//     markerCurrent.setMap(map);\n//     directionsRenderer.setMap(map);\n//\n//     directionsService.route({\n//       origin: new google.maps.LatLng(this.state.stores[0]),\n//       destination: new google.maps.LatLng(this.state.stores[0]),\n//       waypoints: [\n//           {location: new google.maps.LatLng(this.state.stores[1])},\n//           {location: new google.maps.LatLng(this.state.stores[2])},\n//           {location: new google.maps.LatLng(this.state.stores[3])}\n//         ],\n//       avoidHighways: true,\n//       travelMode: 'WALKING',\n//       region: 'gb'\n//     }, function (result, status) {\n//       directionsRenderer.setDirections(result);\n//     })\n//   }\n//\n//\n//   render() {\n//     return (\n//       <div className='App'>\n//       <div>\n//         <h1>Route Around</h1>\n//       <div>\n//       <form className='App' onSubmit={this.handleSubmit}>\n//         <label>\n//           Start Location:\n//           <input\n//             name=\"postCode\"\n//             type=\"text\"\n//             value={this.state.postCode}\n//             onChange={this.handlePostcodeChange} />\n//             (PostCode)\n//         </label>\n//         <br />\n//         <br />\n//         <label>\n//           Distance:\n//           <input\n//             name=\"distance\"\n//             type=\"number\"\n//             value={this.state.distance}\n//             onChange={this.handleDistanceChange} />\n//             Kilometres\n//         </label>\n//         <br />\n//         <br />\n//         <input type=\"submit\" value=\"GO!\" />\n//         <br />\n//       </form>\n//       <div id='map'>\n//         <Map yesIWantToUseGoogleMapApiInternals centerAroundCurrentLocation google={this.props.google}>\n//           <Marker onClick={this.onMarkerClick} name={'current location'} />\n//           <InfoWindow\n//             marker={this.state.activeMarker}\n//             visible={this.state.showingInfoWindow}\n//             onClose={this.onClose}\n//           >\n//             <div>\n//               <h4>{this.state.selectedPlace.name}</h4>\n//             </div>\n//           </InfoWindow>\n//           <Marker\n//                 icon=\"https://www.robotwoods.com/dev/misc/bluecircle.png\"\n//                 position={this.state.currentLocation}\n//             />\n//           {this.displayMarkers()}\n//         </Map>\n//       </div>\n//       </div>\n//       </div>\n//       </div>\n//     );\n//   }\n// }\n//\n// // export default App;\n// export default GoogleApiWrapper({\n//   apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n// })(MapContainer);\n//\n// MapContainer.defaultProps = {\n//   zoom: 17,\n//   initialCenter: {\n//     lat: 51.4934,\n//     lng: 0.0098\n//   },\n//   centerAroundCurrentLocation: true,\n//   visible: true\n// };\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderMap = () => {\n      window['initMap'] = () => {\n        this.loadMap();\n      };\n\n      if (!window.document.getElementById('google-map-script')) {\n        var s = window.document.createElement(\"script\");\n        s.id = \"google-map-script\";\n        s.type = \"text/javascript\";\n        s.src = \"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap\";\n        window.document.body.appendChild(s);\n      } else {\n        this.loadMap();\n      }\n    };\n\n    this.loadMap = () => {\n      var map = new window['google'].maps.Map(this.refs.map, {\n        center: {\n          lat: 22.7196,\n          lng: 75.8577\n        },\n        zoom: 8\n      });\n      var marker = new window['google'].maps.Marker({\n        position: {\n          lat: 22.7196,\n          lng: 75.8577\n        },\n        map: map,\n        title: 'Hello World!',\n        draggable: true,\n        animation: window['google'].maps.Animation.DROP\n      });\n      var contentString = '<div id=\"content\">' + '<div id=\"siteNotice\">' + '</div>' + '<h3 id=\"thirdHeading\" class=\"thirdHeading\">W3path.com</h3>' + '<div id=\"bodyContent\">' + '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>' + '</div>' + '</div>';\n      var infowindow = new window['google'].maps.InfoWindow({\n        content: contentString\n      });\n      marker.addListener('click', function () {\n        infowindow.open(map, marker);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.renderMap();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-10 mx-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Google Map\"), React.createElement(\"div\", {\n      className: \"card mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"map\",\n      style: {\n        'width': '100%',\n        'height': '400px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/student/Projects/google-react-test/src/App.js"],"names":["React","Component","App","renderMap","window","loadMap","document","getElementById","s","createElement","id","type","src","body","appendChild","map","maps","Map","refs","center","lat","lng","zoom","marker","Marker","position","title","draggable","animation","Animation","DROP","contentString","infowindow","InfoWindow","content","addListener","open","componentDidMount","render"],"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","sourcesContent":["// /*global google*/\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\n// import CurrentLocation from './CurrentLocation';\n//\n// export class MapContainer extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     const { lat, lng } = this.props.initialCenter\n//     this.state = {\n//       stores: [],\n//       showingInfoWindow: false,\n//       activeMarker: {},\n//       selectedPlace: {},\n//       postCode: '',\n//       distance: 0,\n//       geocoder: {},\n//       postCodeCoords: {},\n//       currentLocation: {\n//         lat: lat,\n//         lng: lng\n//       }\n//     }\n//     this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n//     this.handleDistanceChange = this.handleDistanceChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//\n//   onMarkerClick = (props, marker, e) =>\n//     this.setState({\n//       selectedPlace: props,\n//       activeMarker: marker,\n//       showingInfoWindow: true\n//     });\n//\n//\n//   onClose = props => {\n//     if (this.state.showingInfoWindow) {\n//       this.setState({\n//         showingInfoWindow: false,\n//         activeMarker: null\n//       });\n//     }\n//   };\n//\n//   displayMarkers = () => {\n//     return this.state.stores.map((store, index) => {\n//       return <Marker key={index} id={index} position={{\n//        lat: store.lat,\n//        lng: store.lng\n//      }}\n//      onClick={() => console.log(\"You clicked me!\")} />\n//     })\n//   }\n//\n//   getCoordinates = async (postcode) => {\n//     const locator = new google.maps.Geocoder();\n//     const coords = await new Promise(function(resolve, reject) {\n//       locator.geocode({ 'address': postcode }, function(results, status) {\n//         resolve(results);\n//       })\n//     })\n//     return { lat: coords[0].geometry.location.lat(), lng: coords[0].geometry.location.lng() }\n//   }\n//\n//   setCurrentLocation = async () => {\n//     if (this.props.centerAroundCurrentLocation) {\n//       if (navigator && navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(pos => {\n//           const coords = pos.coords;\n//           this.setState({\n//             currentLocation: {\n//               lat: coords.latitude,\n//               lng: coords.longitude\n//             }\n//           });\n//         });\n//       }\n//     }\n//   }\n//\n//   handlePostcodeChange(event) {\n//     this.setState({postCode: event.target.value});\n//   }\n//\n//   handleDistanceChange(event) {\n//     this.setState({distance: event.target.value});\n//   }\n//\n//   handleSubmit(event) {\n//     event.preventDefault()\n//     this.getCoordinates(this.state.postCode)\n//     .then(result => {\n//       alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n//       this.setState({postCodeCoords: result});\n//       var data = {\n//         'coordinates': this.state.postCodeCoords,\n//         'distance': this.state.distance\n//       }\n//       fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(data)\n//       })\n//       .then((response) => {\n//         return response.json();\n//       })\n//       .then((myJson) => {\n//         this.setState({stores: myJson})\n//       });\n//     })\n//     .catch(error => {\n//       alert(error)\n//     })\n//   };\n//\n//   componentDidMount() {\n//     this.setCurrentLocation();\n//\n//     var directionsService = new google.maps.DirectionsService();\n//     var directionsRenderer = new google.maps.DirectionsRenderer();\n//     var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n//     var mapOptions = {\n//       center: center,\n//       zoom: 16\n//     }\n//     var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n//     directionsRenderer.setMap(map);\n//   }\n//\n//   componentDidUpdate() {\n//     this.setCurrentLocation();\n//\n//     var directionsService = new google.maps.DirectionsService();\n//     var directionsRenderer = new google.maps.DirectionsRenderer({suppressMarkers: true});\n//     var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n//     var mapOptions = {\n//       center: center,\n//       zoom: 16\n//     }\n//     var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n//     var markerStart = new google.maps.Marker({position: this.state.stores[0]})\n//     var markerCurrent = new google.maps.Marker({position: this.state.currentLocation})\n//     markerStart.setMap(map);\n//     markerCurrent.setMap(map);\n//     directionsRenderer.setMap(map);\n//\n//     directionsService.route({\n//       origin: new google.maps.LatLng(this.state.stores[0]),\n//       destination: new google.maps.LatLng(this.state.stores[0]),\n//       waypoints: [\n//           {location: new google.maps.LatLng(this.state.stores[1])},\n//           {location: new google.maps.LatLng(this.state.stores[2])},\n//           {location: new google.maps.LatLng(this.state.stores[3])}\n//         ],\n//       avoidHighways: true,\n//       travelMode: 'WALKING',\n//       region: 'gb'\n//     }, function (result, status) {\n//       directionsRenderer.setDirections(result);\n//     })\n//   }\n//\n//\n//   render() {\n//     return (\n//       <div className='App'>\n//       <div>\n//         <h1>Route Around</h1>\n//       <div>\n//       <form className='App' onSubmit={this.handleSubmit}>\n//         <label>\n//           Start Location:\n//           <input\n//             name=\"postCode\"\n//             type=\"text\"\n//             value={this.state.postCode}\n//             onChange={this.handlePostcodeChange} />\n//             (PostCode)\n//         </label>\n//         <br />\n//         <br />\n//         <label>\n//           Distance:\n//           <input\n//             name=\"distance\"\n//             type=\"number\"\n//             value={this.state.distance}\n//             onChange={this.handleDistanceChange} />\n//             Kilometres\n//         </label>\n//         <br />\n//         <br />\n//         <input type=\"submit\" value=\"GO!\" />\n//         <br />\n//       </form>\n//       <div id='map'>\n//         <Map yesIWantToUseGoogleMapApiInternals centerAroundCurrentLocation google={this.props.google}>\n//           <Marker onClick={this.onMarkerClick} name={'current location'} />\n//           <InfoWindow\n//             marker={this.state.activeMarker}\n//             visible={this.state.showingInfoWindow}\n//             onClose={this.onClose}\n//           >\n//             <div>\n//               <h4>{this.state.selectedPlace.name}</h4>\n//             </div>\n//           </InfoWindow>\n//           <Marker\n//                 icon=\"https://www.robotwoods.com/dev/misc/bluecircle.png\"\n//                 position={this.state.currentLocation}\n//             />\n//           {this.displayMarkers()}\n//         </Map>\n//       </div>\n//       </div>\n//       </div>\n//       </div>\n//     );\n//   }\n// }\n//\n// // export default App;\n// export default GoogleApiWrapper({\n//   apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n// })(MapContainer);\n//\n// MapContainer.defaultProps = {\n//   zoom: 17,\n//   initialCenter: {\n//     lat: 51.4934,\n//     lng: 0.0098\n//   },\n//   centerAroundCurrentLocation: true,\n//   visible: true\n// };\n\nimport React, { Component } from 'react';\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.renderMap();\n    }\n\n    renderMap = () => {\n\n        window['initMap'] = () => {\n          this.loadMap();\n        }\n        if(!window.document.getElementById('google-map-script')) {\n          var s = window.document.createElement(\"script\");\n          s.id = \"google-map-script\";\n          s.type = \"text/javascript\";\n          s.src = \"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap\";\n\n          window.document.body.appendChild(s);\n        } else {\n          this.loadMap();\n        }\n    }\n\n    loadMap = () => {\n\n        var map = new window['google'].maps.Map(this.refs.map, {\n            center: {lat: 22.7196, lng: 75.8577},\n            zoom: 8\n        });\n\n        var marker = new window['google'].maps.Marker({\n            position: {lat: 22.7196, lng: 75.8577},\n            map: map,\n            title: 'Hello World!',\n            draggable: true,\n            animation: window['google'].maps.Animation.DROP,\n        });\n\n        var contentString = '<div id=\"content\">'+\n        '<div id=\"siteNotice\">'+\n        '</div>'+\n        '<h3 id=\"thirdHeading\" class=\"thirdHeading\">W3path.com</h3>'+\n        '<div id=\"bodyContent\">'+\n        '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>'+\n        '</div>'+\n        '</div>';\n\n        var infowindow = new window['google'].maps.InfoWindow({\n            content: contentString\n        });\n\n        marker.addListener('click', function() {\n            infowindow.open(map, marker);\n        });\n\n    }\n\n    render() {\n\n      return (\n        <div className=\"row mt-5\">\n            <div className=\"col-md-10 mx-auto\">\n                <h2 className=\"text-left\">Google Map</h2>\n                <div className=\"card mt-3\">\n                    <div className=\"card-body\">\n                        <div ref=\"map\" style={{'width':'100%', 'height':'400px' }}></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n      );\n    }\n  }\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}