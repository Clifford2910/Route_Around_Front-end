{"ast":null,"code":"var _jsxFileName = \"/Users/student/Projects/google-react-test/src/App.js\";\n\n/*global google*/\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\nimport CurrentLocation from './CurrentLocation';\nexport class MapContainer extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.getCoordinates = async postcode => {\n      const locator = new google.maps.Geocoder();\n      const coords = await new Promise(function (resolve, reject) {\n        locator.geocode({\n          'address': postcode\n        }, function (results, status) {\n          resolve(results);\n        });\n      });\n      return {\n        lat: coords[0].geometry.location.lat(),\n        lng: coords[0].geometry.location.lng()\n      };\n    };\n\n    this.state = {\n      origin: [],\n      stores: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      postCode: '',\n      distance: 0,\n      geocoder: {},\n      postCodeCoords: {}\n    };\n    this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handlePostcodeChange(event) {\n    this.setState({\n      postCode: event.target.value\n    });\n  }\n\n  handleDistanceChange(event) {\n    this.setState({\n      distance: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.getCoordinates(this.state.postCode).then(result => {\n      alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n      this.setState({\n        postCodeCoords: result\n      });\n      var data = {\n        'coordinates': this.state.postCodeCoords,\n        'distance': this.state.distance\n      };\n      fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        return response.json();\n      }).then(myJson => {\n        this.setState({\n          stores: myJson\n        });\n      });\n    }).catch(error => {\n      alert(error);\n    });\n  }\n\n  componentDidMount() {\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer({\n      suppressMarkers: true\n    });\n    var center = new google.maps.LatLng(51.5178767, -0.0762007);\n    var mapOptions = {\n      center: center,\n      zoom: 5\n    };\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n  }\n\n  componentDidUpdate() {\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer();\n    var center = new google.maps.LatLng(51.5178767, -0.0762007);\n    var mapOptions = {\n      center: center,\n      zoom: 17\n    };\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n    directionsService.route({\n      origin: new google.maps.LatLng(this.state.stores[0]),\n      destination: new google.maps.LatLng(this.state.stores[0]),\n      waypoints: [{\n        location: new google.maps.LatLng(this.state.stores[1])\n      }, {\n        location: new google.maps.LatLng(this.state.stores[2])\n      }, {\n        location: new google.maps.LatLng(this.state.stores[3])\n      }],\n      avoidHighways: true,\n      travelMode: 'WALKING',\n      region: 'gb'\n    }, function (result, status) {\n      directionsRenderer.setDirections(result);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Route Around\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"App\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Start Location:\", React.createElement(\"input\", {\n      name: \"postCode\",\n      type: \"text\",\n      value: this.state.postCode,\n      onChange: this.handlePostcodeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), \"(PostCode)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Distance:\", React.createElement(\"input\", {\n      name: \"distance\",\n      type: \"number\",\n      value: this.state.distance,\n      onChange: this.handleDistanceChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), \"Kilometres\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"GO!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(CurrentLocation, {\n      yesIWantToUseGoogleMapApiInternals: true,\n      centerAroundCurrentLocation: true,\n      google: this.props.google,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'current location',\n      position: this.state.stores[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, this.state.selectedPlace.name))), \"// \", this.displayMarkers())))));\n  }\n\n} // export default App;\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n})(MapContainer);","map":{"version":3,"sources":["/Users/student/Projects/google-react-test/src/App.js"],"names":["React","Map","GoogleApiWrapper","Marker","InfoWindow","Polyline","DirectionsRenderer","GoogleMapReact","CurrentLocation","MapContainer","Component","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","getCoordinates","postcode","locator","google","maps","Geocoder","coords","Promise","resolve","reject","geocode","results","status","lat","geometry","location","lng","origin","stores","postCode","distance","geocoder","postCodeCoords","handlePostcodeChange","bind","handleDistanceChange","handleSubmit","event","target","value","preventDefault","then","result","alert","data","fetch","method","headers","body","JSON","stringify","response","json","myJson","catch","error","componentDidMount","directionsService","DirectionsService","directionsRenderer","suppressMarkers","center","LatLng","mapOptions","zoom","map","document","getElementById","setMap","componentDidUpdate","route","destination","waypoints","avoidHighways","travelMode","region","setDirections","render","name","displayMarkers","apiKey"],"mappings":"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","sourcesContent":["/*global google*/\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\nimport CurrentLocation from './CurrentLocation';\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      origin: [],\n      stores: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      postCode: '',\n      distance: 0,\n      geocoder: {},\n      postCodeCoords: {}\n    }\n    this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  // displayMarkers = () => {\n  //   // return this.state.stores.map((store, index) => {\n  //     return <Marker position={{\n  //      lat: this.state.postCodeCoords.lat,\n  //      lng: this.state.postCodeCoords.lng\n  //    }}\n  //    onClick={() => console.log(\"You clicked me!\")} />\n  //   }\n\n\n  getCoordinates = async (postcode) => {\n    const locator = new google.maps.Geocoder();\n    const coords = await new Promise(function(resolve, reject) {\n      locator.geocode({ 'address': postcode }, function(results, status) {\n        resolve(results);\n      })\n    })\n    return { lat: coords[0].geometry.location.lat(), lng: coords[0].geometry.location.lng() }\n  }\n\n  handlePostcodeChange(event) {\n    this.setState({postCode: event.target.value});\n  }\n\n  handleDistanceChange(event) {\n    this.setState({distance: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    this.getCoordinates(this.state.postCode)\n    .then(result => {\n      alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n      this.setState({postCodeCoords: result});\n      var data = {\n        'coordinates': this.state.postCodeCoords,\n        'distance': this.state.distance\n      }\n      fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n      })\n      .then((response) => {\n        return response.json();\n      })\n      .then((myJson) => {\n        this.setState({stores: myJson})\n      });\n    })\n    .catch(error => {\n      alert(error)\n    })\n  };\n\n  componentDidMount() {\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer({suppressMarkers: true});\n    var center = new google.maps.LatLng(51.5178767, -0.0762007)\n    var mapOptions = {\n      center: center,\n      zoom: 5\n    }\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n  }\n\n  componentDidUpdate() {\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer();\n    var center = new google.maps.LatLng(51.5178767, -0.0762007)\n    var mapOptions = {\n      center: center,\n      zoom: 17\n    }\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n\n    directionsService.route({\n      origin: new google.maps.LatLng(this.state.stores[0]),\n      destination: new google.maps.LatLng(this.state.stores[0]),\n      waypoints: [\n          {location: new google.maps.LatLng(this.state.stores[1])},\n          {location: new google.maps.LatLng(this.state.stores[2])},\n          {location: new google.maps.LatLng(this.state.stores[3])}\n        ],\n      avoidHighways: true,\n      travelMode: 'WALKING',\n      region: 'gb'\n    }, function (result, status) {\n      directionsRenderer.setDirections(result);\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div className='App'>\n      <div>\n        <h1>Route Around</h1>\n      <div>\n      <form className='App' onSubmit={this.handleSubmit}>\n        <label>\n          Start Location:\n          <input\n            name=\"postCode\"\n            type=\"text\"\n            value={this.state.postCode}\n            onChange={this.handlePostcodeChange} />\n            (PostCode)\n        </label>\n        <br />\n        <br />\n        <label>\n          Distance:\n          <input\n            name=\"distance\"\n            type=\"number\"\n            value={this.state.distance}\n            onChange={this.handleDistanceChange} />\n            Kilometres\n        </label>\n        <br />\n        <br />\n        <input type=\"submit\" value=\"GO!\" />\n        <br />\n      </form>\n      <div id='map'>\n        <CurrentLocation yesIWantToUseGoogleMapApiInternals centerAroundCurrentLocation google={this.props.google}>\n          <Marker onClick={this.onMarkerClick} name={'current location'} position={this.state.stores[0]} />\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n          </InfoWindow>\n          // {this.displayMarkers()}\n        </CurrentLocation>\n      </div>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n// export default App;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}