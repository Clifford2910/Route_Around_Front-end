{"ast":null,"code":"var _jsxFileName = \"/Users/ellieaston/Projects/final-project/Route_Around_Front-end/src/App.js\";\n\n/*global google*/\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\nimport CurrentLocation from './CurrentLocation';\nexport class MapContainer extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.displayMarkers = () => {\n      return this.state.stores.map((store, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: store.lat,\n            lng: store.lng\n          },\n          onClick: () => console.log(\"You clicked me!\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.getCoordinates = async postcode => {\n      const locator = new google.maps.Geocoder();\n      const coords = await new Promise(function (resolve, reject) {\n        locator.geocode({\n          'address': postcode\n        }, function (results, status) {\n          resolve(results);\n        });\n      });\n      return {\n        lat: coords[0].geometry.location.lat(),\n        lng: coords[0].geometry.location.lng()\n      };\n    };\n\n    this.setCurrentLocation = async () => {\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(pos => {\n            const coords = pos.coords;\n            this.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            });\n          });\n        }\n      }\n    };\n\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      stores: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      postCode: '',\n      distance: 0,\n      geocoder: {},\n      postCodeCoords: {},\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n    this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handlePostcodeChange(event) {\n    this.setState({\n      postCode: event.target.value\n    });\n  }\n\n  handleDistanceChange(event) {\n    this.setState({\n      distance: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.state.postCode == '') {\n      var startPointCoords = this.state.currentLocation;\n      alert('Your current coordinates are: ' + startPointCoords);\n    } else {\n      this.getCoordinates(this.state.postCode).then(result => {\n        alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n        this.setState({\n          postCodeCoords: result\n        });\n        var data = {\n          'coordinates': this.state.postCodeCoords,\n          'distance': this.state.distance\n        };\n        fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        }).then(response => {\n          return response.json();\n        }).then(myJson => {\n          this.setState({\n            stores: myJson\n          });\n        });\n      }).catch(error => {\n        alert(error);\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.setCurrentLocation();\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer();\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng);\n    var mapOptions = {\n      center: center,\n      zoom: 16\n    };\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n  }\n\n  componentDidUpdate() {\n    this.setCurrentLocation();\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer({\n      suppressMarkers: true\n    });\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng);\n    var mapOptions = {\n      center: center,\n      zoom: 16\n    };\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    var markerStart = new google.maps.Marker({\n      position: this.state.stores[0]\n    });\n    var markerCurrent = new google.maps.Marker({\n      position: this.state.currentLocation\n    });\n    markerStart.setMap(map);\n    markerCurrent.setMap(map);\n    directionsRenderer.setMap(map);\n    directionsService.route({\n      origin: new google.maps.LatLng(this.state.stores[0]),\n      destination: new google.maps.LatLng(this.state.stores[0]),\n      waypoints: [{\n        location: new google.maps.LatLng(this.state.stores[1])\n      }, {\n        location: new google.maps.LatLng(this.state.stores[2])\n      }, {\n        location: new google.maps.LatLng(this.state.stores[3])\n      }],\n      avoidHighways: true,\n      travelMode: 'WALKING',\n      region: 'gb'\n    }, function (result, status) {\n      directionsRenderer.setDirections(result);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Route Around\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"App\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Start Location:\", React.createElement(\"input\", {\n      name: \"postCode\",\n      type: \"text\",\n      value: this.state.postCode,\n      onChange: this.handlePostcodeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), \"(PostCode)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Distance:\", React.createElement(\"input\", {\n      name: \"distance\",\n      type: \"number\",\n      value: this.state.distance,\n      onChange: this.handleDistanceChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), \"Kilometres\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"GO!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(CurrentLocation, {\n      yesIWantToUseGoogleMapApiInternals: true,\n      centerAroundCurrentLocation: true,\n      google: this.props.google,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'current location',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, this.state.selectedPlace.name))), React.createElement(Marker, {\n      icon: \"https://www.robotwoods.com/dev/misc/bluecircle.png\",\n      position: this.state.currentLocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), this.displayMarkers())))));\n  }\n\n} // export default App;\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n})(MapContainer);\nMapContainer.defaultProps = {\n  zoom: 17,\n  initialCenter: {\n    lat: 51.4934,\n    lng: 0.0098\n  },\n  centerAroundCurrentLocation: true,\n  visible: true\n};","map":{"version":3,"sources":["/Users/ellieaston/Projects/final-project/Route_Around_Front-end/src/App.js"],"names":["React","Map","GoogleApiWrapper","Marker","InfoWindow","Polyline","DirectionsRenderer","GoogleMapReact","CurrentLocation","MapContainer","Component","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","displayMarkers","stores","map","store","index","lat","lng","console","log","getCoordinates","postcode","locator","google","maps","Geocoder","coords","Promise","resolve","reject","geocode","results","status","geometry","location","setCurrentLocation","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","currentLocation","latitude","longitude","initialCenter","postCode","distance","geocoder","postCodeCoords","handlePostcodeChange","bind","handleDistanceChange","handleSubmit","event","target","value","preventDefault","startPointCoords","alert","then","result","data","fetch","method","headers","body","JSON","stringify","response","json","myJson","catch","error","componentDidMount","directionsService","DirectionsService","directionsRenderer","center","LatLng","mapOptions","zoom","document","getElementById","setMap","componentDidUpdate","suppressMarkers","markerStart","position","markerCurrent","route","origin","destination","waypoints","avoidHighways","travelMode","region","setDirections","render","name","apiKey","defaultProps","visible"],"mappings":"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","sourcesContent":["/*global google*/\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline, DirectionsRenderer, GoogleMapReact } from 'google-maps-react';\nimport CurrentLocation from './CurrentLocation';\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    const { lat, lng } = this.props.initialCenter\n    this.state = {\n      stores: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      postCode: '',\n      distance: 0,\n      geocoder: {},\n      postCodeCoords: {},\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    }\n    this.handlePostcodeChange = this.handlePostcodeChange.bind(this);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  displayMarkers = () => {\n    return this.state.stores.map((store, index) => {\n      return <Marker key={index} id={index} position={{\n       lat: store.lat,\n       lng: store.lng\n     }}\n     onClick={() => console.log(\"You clicked me!\")} />\n    })\n  }\n\n  getCoordinates = async (postcode) => {\n    const locator = new google.maps.Geocoder();\n    const coords = await new Promise(function(resolve, reject) {\n      locator.geocode({ 'address': postcode }, function(results, status) {\n        resolve(results);\n      })\n    })\n    return { lat: coords[0].geometry.location.lat(), lng: coords[0].geometry.location.lng() }\n  }\n\n  setCurrentLocation = async () => {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n  }\n\n  handlePostcodeChange(event) {\n    this.setState({postCode: event.target.value});\n  }\n\n  handleDistanceChange(event) {\n    this.setState({distance: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    if(this.state.postCode == ''){\n      var startPointCoords = this.state.currentLocation;\n      alert('Your current coordinates are: ' + startPointCoords)\n    } else {\n    this.getCoordinates(this.state.postCode)\n    .then(result => {\n      alert('Ready for your ' + this.state.distance + 'km, your postcode is ' + this.state.postCode);\n      this.setState({postCodeCoords: result});\n      var data = {\n        'coordinates': this.state.postCodeCoords,\n        'distance': this.state.distance\n      }\n      fetch('https://routearound-back.herokuapp.com/generate-waypoint-coordinates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n      })\n      .then((response) => {\n        return response.json();\n      })\n      .then((myJson) => {\n        this.setState({stores: myJson})\n      });\n    })\n    .catch(error => {\n      alert(error)\n    })\n  }};\n\n  componentDidMount() {\n    this.setCurrentLocation();\n\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer();\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n    var mapOptions = {\n      center: center,\n      zoom: 16\n    }\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsRenderer.setMap(map);\n  }\n\n  componentDidUpdate() {\n    this.setCurrentLocation();\n\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRenderer = new google.maps.DirectionsRenderer({suppressMarkers: true});\n    var center = new google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng)\n    var mapOptions = {\n      center: center,\n      zoom: 16\n    }\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    var markerStart = new google.maps.Marker({position: this.state.stores[0]})\n    var markerCurrent = new google.maps.Marker({position: this.state.currentLocation})\n    markerStart.setMap(map);\n    markerCurrent.setMap(map);\n    directionsRenderer.setMap(map);\n\n    directionsService.route({\n      origin: new google.maps.LatLng(this.state.stores[0]),\n      destination: new google.maps.LatLng(this.state.stores[0]),\n      waypoints: [\n          {location: new google.maps.LatLng(this.state.stores[1])},\n          {location: new google.maps.LatLng(this.state.stores[2])},\n          {location: new google.maps.LatLng(this.state.stores[3])}\n        ],\n      avoidHighways: true,\n      travelMode: 'WALKING',\n      region: 'gb'\n    }, function (result, status) {\n      directionsRenderer.setDirections(result);\n    })\n  }\n\n\n  render() {\n    return (\n      <div className='App'>\n      <div>\n        <h1>Route Around</h1>\n      <div>\n      <form className='App' onSubmit={this.handleSubmit}>\n        <label>\n          Start Location:\n          <input\n            name=\"postCode\"\n            type=\"text\"\n            value={this.state.postCode}\n            onChange={this.handlePostcodeChange} />\n            (PostCode)\n        </label>\n        <br />\n        <br />\n        <label>\n          Distance:\n          <input\n            name=\"distance\"\n            type=\"number\"\n            value={this.state.distance}\n            onChange={this.handleDistanceChange} />\n            Kilometres\n        </label>\n        <br />\n        <br />\n        <input type=\"submit\" value=\"GO!\" />\n        <br />\n      </form>\n      <div id='map'>\n        <CurrentLocation yesIWantToUseGoogleMapApiInternals centerAroundCurrentLocation google={this.props.google}>\n          <Marker onClick={this.onMarkerClick} name={'current location'} />\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n          </InfoWindow>\n          <Marker\n                icon=\"https://www.robotwoods.com/dev/misc/bluecircle.png\"\n                position={this.state.currentLocation}\n            />\n          {this.displayMarkers()}\n        </CurrentLocation>\n      </div>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n// export default App;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDro0XKEZYd8mj42cXWVukmO0WKJstaAYs&callback='\n})(MapContainer);\n\nMapContainer.defaultProps = {\n  zoom: 17,\n  initialCenter: {\n    lat: 51.4934,\n    lng: 0.0098\n  },\n  centerAroundCurrentLocation: true,\n  visible: true\n};\n"]},"metadata":{},"sourceType":"module"}